/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-dfa5147da2fdf24f7b5ffd2d0a979a5d6f1362c8
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.epam.reportportal.extension.bugtracking.jira.api.model;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/**
 * The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals.
 */
@JsonPropertyOrder({
    ApprovalConfiguration.JSON_PROPERTY_ACTIVE,
    ApprovalConfiguration.JSON_PROPERTY_CONDITION_TYPE,
    ApprovalConfiguration.JSON_PROPERTY_CONDITION_VALUE,
    ApprovalConfiguration.JSON_PROPERTY_EXCLUDE,
    ApprovalConfiguration.JSON_PROPERTY_FIELD_ID,
    ApprovalConfiguration.JSON_PROPERTY_PRE_POPULATED_FIELD_ID,
    ApprovalConfiguration.JSON_PROPERTY_TRANSITION_APPROVED,
    ApprovalConfiguration.JSON_PROPERTY_TRANSITION_REJECTED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class ApprovalConfiguration {

  /**
   * Whether the approval configuration is active.
   */
  public enum ActiveEnum {
    TRUE(String.valueOf("true")),

    FALSE(String.valueOf("false"));

    private String value;

    ActiveEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActiveEnum fromValue(String value) {
      for (ActiveEnum b : ActiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @jakarta.annotation.Nonnull
  private ActiveEnum active;

  /**
   * How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of
   * approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be
   * approved. The number will be the same across all groups.
   */
  public enum ConditionTypeEnum {
    NUMBER(String.valueOf("number")),

    PERCENT(String.valueOf("percent")),

    NUMBER_PER_PRINCIPAL(String.valueOf("numberPerPrincipal"));

    private String value;

    ConditionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConditionTypeEnum fromValue(String value) {
      for (ConditionTypeEnum b : ConditionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONDITION_TYPE = "conditionType";
  @jakarta.annotation.Nonnull
  private ConditionTypeEnum conditionType;

  public static final String JSON_PROPERTY_CONDITION_VALUE = "conditionValue";
  @jakarta.annotation.Nonnull
  private String conditionValue;

  /**
   * A list of roles that should be excluded as possible approvers.
   */
  public enum ExcludeEnum {
    ASSIGNEE(String.valueOf("assignee")),

    REPORTER(String.valueOf("reporter"));

    private String value;

    ExcludeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExcludeEnum fromValue(String value) {
      for (ExcludeEnum b : ExcludeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_EXCLUDE = "exclude";
  @jakarta.annotation.Nullable
  private ExcludeEnum exclude;

  public static final String JSON_PROPERTY_FIELD_ID = "fieldId";
  @jakarta.annotation.Nonnull
  private String fieldId;

  public static final String JSON_PROPERTY_PRE_POPULATED_FIELD_ID = "prePopulatedFieldId";
  @jakarta.annotation.Nullable
  private String prePopulatedFieldId;

  public static final String JSON_PROPERTY_TRANSITION_APPROVED = "transitionApproved";
  @jakarta.annotation.Nonnull
  private String transitionApproved;

  public static final String JSON_PROPERTY_TRANSITION_REJECTED = "transitionRejected";
  @jakarta.annotation.Nonnull
  private String transitionRejected;

  public ApprovalConfiguration() {
  }

  /**
   * Constructor with all args parameters
   */
  public ApprovalConfiguration(@JsonProperty(JSON_PROPERTY_ACTIVE) ActiveEnum active,
      @JsonProperty(JSON_PROPERTY_CONDITION_TYPE) ConditionTypeEnum conditionType, @JsonProperty(JSON_PROPERTY_CONDITION_VALUE) String conditionValue,
      @JsonProperty(JSON_PROPERTY_EXCLUDE) ExcludeEnum exclude, @JsonProperty(JSON_PROPERTY_FIELD_ID) String fieldId,
      @JsonProperty(JSON_PROPERTY_PRE_POPULATED_FIELD_ID) String prePopulatedFieldId,
      @JsonProperty(JSON_PROPERTY_TRANSITION_APPROVED) String transitionApproved,
      @JsonProperty(JSON_PROPERTY_TRANSITION_REJECTED) String transitionRejected) {
    this.active = active;
    this.conditionType = conditionType;
    this.conditionValue = conditionValue;
    this.exclude = exclude;
    this.fieldId = fieldId;
    this.prePopulatedFieldId = prePopulatedFieldId;
    this.transitionApproved = transitionApproved;
    this.transitionRejected = transitionRejected;
  }

  public ApprovalConfiguration active(@jakarta.annotation.Nonnull ActiveEnum active) {

    this.active = active;
    return this;
  }

  /**
   * Whether the approval configuration is active.
   *
   * @return active
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActiveEnum getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(@jakarta.annotation.Nonnull ActiveEnum active) {
    this.active = active;
  }

  public ApprovalConfiguration conditionType(@jakarta.annotation.Nonnull ConditionTypeEnum conditionType) {

    this.conditionType = conditionType;
    return this;
  }

  /**
   * How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of
   * approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be
   * approved. The number will be the same across all groups.
   *
   * @return conditionType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConditionTypeEnum getConditionType() {
    return conditionType;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditionType(@jakarta.annotation.Nonnull ConditionTypeEnum conditionType) {
    this.conditionType = conditionType;
  }

  public ApprovalConfiguration conditionValue(@jakarta.annotation.Nonnull String conditionValue) {

    this.conditionValue = conditionValue;
    return this;
  }

  /**
   * The number or percentage of approvals required for a request to be approved. If &#x60;conditionType&#x60; is &#x60;number&#x60;, the value must
   * be 20 or less. If &#x60;conditionType&#x60; is &#x60;percent&#x60;, the value must be 100 or less.
   *
   * @return conditionValue
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONDITION_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConditionValue() {
    return conditionValue;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConditionValue(@jakarta.annotation.Nonnull String conditionValue) {
    this.conditionValue = conditionValue;
  }

  public ApprovalConfiguration exclude(@jakarta.annotation.Nullable ExcludeEnum exclude) {

    this.exclude = exclude;
    return this;
  }


  /**
   * A list of roles that should be excluded as possible approvers.
   *
   * @return exclude
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExcludeEnum getExclude() {
    return exclude;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExclude(@jakarta.annotation.Nullable ExcludeEnum exclude) {
    this.exclude = exclude;
  }

  public ApprovalConfiguration fieldId(@jakarta.annotation.Nonnull String fieldId) {

    this.fieldId = fieldId;
    return this;
  }

  /**
   * The custom field ID of the \&quot;Approvers\&quot; or \&quot;Approver Groups\&quot; field.
   *
   * @return fieldId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFieldId() {
    return fieldId;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFieldId(@jakarta.annotation.Nonnull String fieldId) {
    this.fieldId = fieldId;
  }

  public ApprovalConfiguration prePopulatedFieldId(@jakarta.annotation.Nullable String prePopulatedFieldId) {

    this.prePopulatedFieldId = prePopulatedFieldId;
    return this;
  }

  /**
   * The custom field ID of the field used to pre-populate the Approver field. Only supports the \&quot;Affected Services\&quot; field.
   *
   * @return prePopulatedFieldId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRE_POPULATED_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrePopulatedFieldId() {
    return prePopulatedFieldId;
  }


  @JsonProperty(JSON_PROPERTY_PRE_POPULATED_FIELD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrePopulatedFieldId(@jakarta.annotation.Nullable String prePopulatedFieldId) {
    this.prePopulatedFieldId = prePopulatedFieldId;
  }

  public ApprovalConfiguration transitionApproved(@jakarta.annotation.Nonnull String transitionApproved) {

    this.transitionApproved = transitionApproved;
    return this;
  }

  /**
   * The numeric ID of the transition to be executed if the request is approved.
   *
   * @return transitionApproved
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSITION_APPROVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransitionApproved() {
    return transitionApproved;
  }


  @JsonProperty(JSON_PROPERTY_TRANSITION_APPROVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransitionApproved(@jakarta.annotation.Nonnull String transitionApproved) {
    this.transitionApproved = transitionApproved;
  }

  public ApprovalConfiguration transitionRejected(@jakarta.annotation.Nonnull String transitionRejected) {

    this.transitionRejected = transitionRejected;
    return this;
  }

  /**
   * The numeric ID of the transition to be executed if the request is declined.
   *
   * @return transitionRejected
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSITION_REJECTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransitionRejected() {
    return transitionRejected;
  }


  @JsonProperty(JSON_PROPERTY_TRANSITION_REJECTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransitionRejected(@jakarta.annotation.Nonnull String transitionRejected) {
    this.transitionRejected = transitionRejected;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalConfiguration approvalConfiguration = (ApprovalConfiguration) o;
    return Objects.equals(this.active, approvalConfiguration.active) &&
        Objects.equals(this.conditionType, approvalConfiguration.conditionType) &&
        Objects.equals(this.conditionValue, approvalConfiguration.conditionValue) &&
        Objects.equals(this.exclude, approvalConfiguration.exclude) &&
        Objects.equals(this.fieldId, approvalConfiguration.fieldId) &&
        Objects.equals(this.prePopulatedFieldId, approvalConfiguration.prePopulatedFieldId) &&
        Objects.equals(this.transitionApproved, approvalConfiguration.transitionApproved) &&
        Objects.equals(this.transitionRejected, approvalConfiguration.transitionRejected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, conditionType, conditionValue, exclude, fieldId, prePopulatedFieldId, transitionApproved, transitionRejected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalConfiguration {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
    sb.append("    conditionValue: ").append(toIndentedString(conditionValue)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    prePopulatedFieldId: ").append(toIndentedString(prePopulatedFieldId)).append("\n");
    sb.append("    transitionApproved: ").append(toIndentedString(transitionApproved)).append("\n");
    sb.append("    transitionRejected: ").append(toIndentedString(transitionRejected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

