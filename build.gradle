plugins {
    id "io.spring.dependency-management" version "1.1.4"
    id 'java'
    id 'jacoco'
}

project.ext {
    publishRepo = "https://maven.pkg.github.com/reportportal/plugin-bts-jira"
    dependencyRepos = ["plugin-api", "commons-bom"]
    releaseMode = project.hasProperty("releaseMode")
    pluginID = "jira"
    pluginsDir = "$buildDir/plugins"
}

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    maven { url "https://m2proxy.atlassian.com/repository/public" }
    mavenCentral { url "https://repo1.maven.org/maven2" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version') : 'com.epam.reportportal:commons-bom:5.13.0')
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:8dcc514'
        implementation 'com.github.reportportal:plugin-api:815c74a'
        annotationProcessor 'com.github.reportportal:plugin-api:815c74a'
    }
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'io.atlassian.fugue:fugue:4.7.2'
    implementation 'com.atlassian.jira:jira-rest-java-client-core:5.2.4'

    implementation 'net.oauth.core:oauth:20090617'
    implementation 'net.oauth.core:oauth-httpclient4:20090913'

    implementation 'org.apache.tika:tika-core:1.14'

    testImplementation 'org.springframework:spring-test:5.2.1.RELEASE'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:1.10.19'
}

artifacts {
    archives shadowJar
}

test {
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
}

build.dependsOn jacocoTestReport

wrapper {
    gradleVersion = '8.10.2'
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginID}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Andrei Varabyeu",
                "Plugin-Class": "com.epam.reportportal.extension.bugtracking.jira.JiraStrategyPlugin",
                "Plugin-Service": "api"
//                "Plugin-Dependencies": ""
        )
    }
}

shadowJar {
    configurations = [project.configurations.compileClasspath]
    zip64 true
    dependencies {
        include(dependency("com.atlassian.jira:jira-rest-java-client-api:.*"))
        include(dependency("com.atlassian.jira:jira-rest-java-client-core:.*"))
        include(dependency("com.atlassian.httpclient:atlassian-httpclient-api:.*"))
        include(dependency("com.atlassian.httpclient:atlassian-httpclient-library:.*"))
        include(dependency("com.atlassian.sal:sal-api:.*"))
        include(dependency("com.atlassian.event:atlassian-event:.*"))
        include(dependency("io.atlassian.util.concurrent:atlassian-util-concurrent:.*"))
        include(dependency("io.atlassian.fugue:fugue:.*"))
        include(dependency("org.apache.httpcomponents:httpasyncclient:.*"))
        include(dependency("org.apache.httpcomponents:httpasyncclient-cache:.*"))
        include(dependency("org.apache.httpcomponents:httpclient:.*"))
        include(dependency("org.apache.httpcomponents:httpclient-cache:.*"))
        include(dependency("org.apache.httpcomponents:httpcore:.*"))
        include(dependency("org.apache.httpcomponents:httpcore-nio:.*"))
        include(dependency("org.apache.httpcomponents:httpcore-mime:.*"))
        include(dependency("org.glassfish.jersey.core:jersey-server:.*"))
        include(dependency("org.glassfish.jersey.core:jersey-common:.*"))
        include(dependency("jakarta.ws.rs:jakarta.ws.rs-api:.*"))
        //include(dependency("jakarta.annotation:jakarta.annotation-api:.*"))
        include(dependency("org.apache.tomcat:tomcat-annotations-api:.*"))
        include(dependency("org.glassfish.hk2.external:jakarta.inject:.*"))
        include(dependency("org.glassfish.hk2:osgi-resource-locator:.*"))
        include(dependency("org.glassfish.jaxb:jaxb-runtime:.*"))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginID}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}
