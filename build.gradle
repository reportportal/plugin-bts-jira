plugins {
    id "io.spring.dependency-management" version "1.1.7"
    id 'java'
    id 'jacoco'
    id "org.openapi.generator" version "7.12.0"
}

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

project.ext {
    publishRepo = "https://maven.pkg.github.com/reportportal/plugin-bts-jira"
    dependencyRepos = ["plugin-api", "commons-bom"]
    releaseMode = project.hasProperty("releaseMode")
    pluginID = "jira"
    pluginsDir = "$buildDir/plugins"
}

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    maven { url "https://m2proxy.atlassian.com/repository/public" }
    mavenCentral { url "https://repo1.maven.org/maven2" }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version') : 'com.epam.reportportal:commons-bom:5.13.0')
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext['spring-boot.version'] = "${springBootVersion}"

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:cd88356'
        implementation 'com.github.reportportal:plugin-api:ae5c502'
        annotationProcessor 'com.github.reportportal:plugin-api:ae5c502'
    }
    implementation("org.apache.httpcomponents.client5:httpclient5:5.4.2") // supports gzip encoding
    implementation "org.hibernate.validator:hibernate-validator:8.0.2.Final"
    implementation 'jakarta.el:jakarta.el-api:6.0.1'
    implementation 'org.glassfish:jakarta.el:4.0.2'
    implementation "org.springdoc:springdoc-openapi-common:1.8.0"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation('org.junit.jupiter:junit-jupiter:5.11.4')
    testImplementation 'org.springframework:spring-test:6.2.3'
    testImplementation "org.mockito:mockito-junit-jupiter:5.14.2"
    testImplementation 'org.hamcrest:hamcrest:3.0'
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/src/main/java"
            exclude("$buildDir/generated/src/main/java/com/epam/reportportal/api/jira/MyselfApi.java")
        }
    }
}


tasks.register('generateJiraApi', GenerateTask) {
    // set latest available api version instead of specific one
    ant.replaceregexp(match: '/rest/api/3', replace: '/rest/api/latest', flags: 'g', byline: false) {
        fileset(dir: '.', includes: "src/main/resources/openapi/swagger-v3.v3.json")
    }

    generatorName.set("java")
    inputSpec.set("$rootDir/src/main/resources/openapi/swagger-v3.v3.json")
    outputDir.set("$buildDir/generated")
    configFile.set("$rootDir/src/main/resources/openapi/config.json")
    ignoreFileOverride = "${projectDir.path}/.openapi-generator-ignore"
    skipOverwrite.set(true)
}

artifacts {
    archives shadowJar
}

test {
    useJUnitPlatform()
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
}

build.dependsOn jacocoTestReport

wrapper {
    gradleVersion = '8.10.2'
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {
    processResources.exclude('openapi')
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginID}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Andrei Varabyeu",
                "Plugin-Class": "com.epam.reportportal.extension.bugtracking.jira.JiraStrategyPlugin",
                "Plugin-Service": "api"
//                "Plugin-Dependencies": ""
        )
    }
}

shadowJar {
    configurations = [project.configurations.compileClasspath]
    zip64 true
    dependencies {
        include(dependency("jakarta.ws.rs:jakarta.ws.rs-api:.*"))
        include(dependency("org.apache.tomcat:tomcat-annotations-api:.*"))
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginID}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn generateJiraApi

